{
  "version": 3,
  "sources": ["../src/change-night-shift-color-temperature.tsx", "../src/utils.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Form, popToRoot, getPreferenceValues, closeMainWindow } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { nightlight } from \"./utils\";\n\nexport default function Main() {\n  const closeWindow = getPreferenceValues<Preferences>().closeWindow;\n\n  const [temperatureError, setTemperatureError] = useState<string | undefined>();\n\n  function validate(temperature: string): boolean {\n    const value = parseInt(temperature);\n\n    if (isNaN(value)) {\n      setTemperatureError(\"Must be an integer.\");\n      return false;\n    } else if (value < 0 || value > 100) {\n      setTemperatureError(\"Must be between 0-100.\");\n      return false;\n    } else {\n      setTemperatureError(undefined);\n      return true;\n    }\n  }\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            title=\"Change Color Temperature\"\n            onSubmit={async ({ temperature }) => {\n              if (validate(temperature)) {\n                if (closeWindow) closeMainWindow();\n                else await popToRoot({ clearSearchBar: true });\n\n                await nightlight(`temp ${temperature}`, `Set color temperature to ${temperature}`);\n              }\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        id=\"temperature\"\n        title=\"Temperature\"\n        placeholder=\"integer between 0 and 100\"\n        error={temperatureError}\n        onChange={validate}\n      />\n    </Form>\n  );\n}\n", "import { execSync } from \"child_process\";\nimport { getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport { cpus } from \"node:os\";\n\nexport async function nightlight(args: string, state: string): Promise<void> {\n  const preferences = getPreferenceValues<Preferences>();\n\n  const nightlightPath: string =\n    preferences.nightlightPath && preferences.nightlightPath.length > 0\n      ? preferences.nightlightPath\n      : cpus()[0].model.includes(\"Apple\")\n        ? \"/opt/homebrew/bin/nightlight\"\n        : \"/usr/local/bin/nightlight\";\n\n  try {\n    execSync(`${nightlightPath} ${args}`);\n\n    await showToast({\n      style: Toast.Style.Success,\n      title: state,\n    });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (e: any) {\n    const msg = \"stderr\" in e ? e.stderr : \"unknown error\";\n\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed\",\n      message: msg.includes(\"nightlight: command not found\") ? \"Please install nightlight.\" : msg,\n    });\n  }\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA2F,wBAC3FC,EAAyB,iBCDzB,IAAAC,EAAyB,yBACzBC,EAAsD,wBACtDC,EAAqB,mBAErB,eAAsBC,EAAWC,EAAcC,EAA8B,CAC3E,IAAMC,KAAc,uBAAiC,EAE/CC,EACJD,EAAY,gBAAkBA,EAAY,eAAe,OAAS,EAC9DA,EAAY,kBACZ,QAAK,EAAE,CAAC,EAAE,MAAM,SAAS,OAAO,EAC9B,+BACA,4BAER,GAAI,IACF,YAAS,GAAGC,KAAkBH,GAAM,EAEpC,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAOC,CACT,CAAC,CAEH,OAAS,EAAP,CACA,IAAMG,EAAM,WAAY,EAAI,EAAE,OAAS,gBAEvC,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,SACP,QAASA,EAAI,SAAS,+BAA+B,EAAI,6BAA+BA,CAC1F,CAAC,CACH,CACF,CDHU,IAAAC,EAAA,6BAxBK,SAARC,GAAwB,CAC7B,IAAMC,KAAc,uBAAiC,EAAE,YAEjD,CAACC,EAAkBC,CAAmB,KAAI,YAA6B,EAE7E,SAASC,EAASC,EAA8B,CAC9C,IAAMC,EAAQ,SAASD,CAAW,EAElC,OAAI,MAAMC,CAAK,GACbH,EAAoB,qBAAqB,EAClC,IACEG,EAAQ,GAAKA,EAAQ,KAC9BH,EAAoB,wBAAwB,EACrC,KAEPA,EAAoB,MAAS,EACtB,GAEX,CAEA,SACE,OAAC,QACC,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CACC,MAAM,2BACN,SAAU,MAAO,CAAE,YAAAE,CAAY,IAAM,CAC/BD,EAASC,CAAW,IAClBJ,KAAa,mBAAgB,EAC5B,QAAM,aAAU,CAAE,eAAgB,EAAK,CAAC,EAE7C,MAAMM,EAAW,QAAQF,IAAe,4BAA4BA,GAAa,EAErF,EACF,EACF,EAGF,mBAAC,OAAK,UAAL,CACC,GAAG,cACH,MAAM,cACN,YAAY,4BACZ,MAAOH,EACP,SAAUE,EACZ,EACF,CAEJ",
  "names": ["change_night_shift_color_temperature_exports", "__export", "Main", "__toCommonJS", "import_api", "import_react", "import_child_process", "import_api", "import_node_os", "nightlight", "args", "state", "preferences", "nightlightPath", "msg", "import_jsx_runtime", "Main", "closeWindow", "temperatureError", "setTemperatureError", "validate", "temperature", "value", "nightlight"]
}
