{
  "version": 3,
  "sources": ["../src/generateV7.tsx", "../node_modules/uuidv7/dist/index.js"],
  "sourcesContent": ["import { showHUD, Clipboard, getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport { uuidv7 } from \"uuidv7\";\n\ninterface UUIDV7Arguments {\n  numberOfUUIDsToGenerate: string;\n}\n\ninterface Preferences {\n  upperCaseLetters: boolean;\n  defaultAction: string;\n}\n\n// don't want to cause a heap error, so cap it \uD83D\uDE31\nconst UUID_MAX_NUMBER = 10000;\n\nexport default async (props: { arguments: UUIDV7Arguments }) => {\n  let { numberOfUUIDsToGenerate } = props.arguments;\n  const { upperCaseLetters, defaultAction } = getPreferenceValues<Preferences>();\n\n  if (!numberOfUUIDsToGenerate) {\n    numberOfUUIDsToGenerate = \"1\";\n  }\n\n  try {\n    const parseableNumber = parseInt(numberOfUUIDsToGenerate, 10);\n\n    if (isNaN(parseableNumber)) {\n      throw new Error(\"INVALID_NUMBER\");\n    }\n\n    // safe?\n    if (parseableNumber <= UUID_MAX_NUMBER) {\n      let uuids = Array.from(Array(parseableNumber)).map(() => uuidv7());\n      if (upperCaseLetters) {\n        uuids = uuids.map((element) => element.toUpperCase());\n      }\n\n      if (defaultAction === \"copy\") {\n        await Clipboard.copy(uuids.join(\"\\r\\n\"));\n      } else if (defaultAction === \"paste\") {\n        await Clipboard.paste(uuids.join(\"\\r\\n\"));\n      }\n      const action = defaultAction === \"copy\" ? \"Copied\" : \"Pasted\";\n      const successMessage = uuids.length > 1 ? `${action} ${uuids.length} new UUIDs.` : `${action} new UUID: ${uuids}`;\n      await showHUD(`\u2705 ${successMessage}`);\n    } else {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Too many UUIDs requested.\",\n        message: `${parseableNumber} exceeds maximum UUIDs of ${UUID_MAX_NUMBER}. Try a lower number.`,\n      });\n    }\n  } catch (e) {\n    switch ((e as { message: string }).message) {\n      case \"INVALID_NUMBER\":\n        await showToast({\n          style: Toast.Style.Failure,\n          title: \"Invalid number.\",\n          message: \"An invalid number has been provided. Try an actual number.\",\n        });\n        break;\n    }\n  }\n};\n", "/**\n * uuidv7: An experimental implementation of the proposed UUID Version 7\n *\n * @license Apache-2.0\n * @copyright 2021-2023 LiosK\n * @packageDocumentation\n */\nconst DIGITS = \"0123456789abcdef\";\n/** Represents a UUID as a 16-byte byte array. */\nexport class UUID {\n    /** @param bytes - The 16-byte byte array representation. */\n    constructor(bytes) {\n        this.bytes = bytes;\n    }\n    /**\n     * Creates an object from the internal representation, a 16-byte byte array\n     * containing the binary UUID representation in the big-endian byte order.\n     *\n     * This method does NOT shallow-copy the argument, and thus the created object\n     * holds the reference to the underlying buffer.\n     *\n     * @throws TypeError if the length of the argument is not 16.\n     */\n    static ofInner(bytes) {\n        if (bytes.length !== 16) {\n            throw new TypeError(\"not 128-bit length\");\n        }\n        else {\n            return new UUID(bytes);\n        }\n    }\n    /**\n     * Builds a byte array from UUIDv7 field values.\n     *\n     * @param unixTsMs - A 48-bit `unix_ts_ms` field value.\n     * @param randA - A 12-bit `rand_a` field value.\n     * @param randBHi - The higher 30 bits of 62-bit `rand_b` field value.\n     * @param randBLo - The lower 32 bits of 62-bit `rand_b` field value.\n     * @throws RangeError if any field value is out of the specified range.\n     */\n    static fromFieldsV7(unixTsMs, randA, randBHi, randBLo) {\n        if (!Number.isInteger(unixTsMs) ||\n            !Number.isInteger(randA) ||\n            !Number.isInteger(randBHi) ||\n            !Number.isInteger(randBLo) ||\n            unixTsMs < 0 ||\n            randA < 0 ||\n            randBHi < 0 ||\n            randBLo < 0 ||\n            unixTsMs > 281474976710655 ||\n            randA > 0xfff ||\n            randBHi > 1073741823 ||\n            randBLo > 4294967295) {\n            throw new RangeError(\"invalid field value\");\n        }\n        const bytes = new Uint8Array(16);\n        bytes[0] = unixTsMs / 2 ** 40;\n        bytes[1] = unixTsMs / 2 ** 32;\n        bytes[2] = unixTsMs / 2 ** 24;\n        bytes[3] = unixTsMs / 2 ** 16;\n        bytes[4] = unixTsMs / 2 ** 8;\n        bytes[5] = unixTsMs;\n        bytes[6] = 0x70 | (randA >>> 8);\n        bytes[7] = randA;\n        bytes[8] = 0x80 | (randBHi >>> 24);\n        bytes[9] = randBHi >>> 16;\n        bytes[10] = randBHi >>> 8;\n        bytes[11] = randBHi;\n        bytes[12] = randBLo >>> 24;\n        bytes[13] = randBLo >>> 16;\n        bytes[14] = randBLo >>> 8;\n        bytes[15] = randBLo;\n        return new UUID(bytes);\n    }\n    /**\n     * Builds a byte array from a string representation.\n     *\n     * This method accepts the following formats:\n     *\n     * - 32-digit hexadecimal format without hyphens: `0189dcd553117d408db09496a2eef37b`\n     * - 8-4-4-4-12 hyphenated format: `0189dcd5-5311-7d40-8db0-9496a2eef37b`\n     * - Hyphenated format with surrounding braces: `{0189dcd5-5311-7d40-8db0-9496a2eef37b}`\n     * - RFC 4122 URN format: `urn:uuid:0189dcd5-5311-7d40-8db0-9496a2eef37b`\n     *\n     * Leading and trailing whitespaces represents an error.\n     *\n     * @throws SyntaxError if the argument could not parse as a valid UUID string.\n     */\n    static parse(uuid) {\n        var _a, _b, _c, _d;\n        let hex = undefined;\n        switch (uuid.length) {\n            case 32:\n                hex = (_a = /^[0-9a-f]{32}$/i.exec(uuid)) === null || _a === void 0 ? void 0 : _a[0];\n                break;\n            case 36:\n                hex =\n                    (_b = /^([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/i\n                        .exec(uuid)) === null || _b === void 0 ? void 0 : _b.slice(1, 6).join(\"\");\n                break;\n            case 38:\n                hex =\n                    (_c = /^\\{([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})\\}$/i\n                        .exec(uuid)) === null || _c === void 0 ? void 0 : _c.slice(1, 6).join(\"\");\n                break;\n            case 45:\n                hex =\n                    (_d = /^urn:uuid:([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/i\n                        .exec(uuid)) === null || _d === void 0 ? void 0 : _d.slice(1, 6).join(\"\");\n                break;\n            default:\n                break;\n        }\n        if (hex) {\n            const inner = new Uint8Array(16);\n            for (let i = 0; i < 16; i += 4) {\n                const n = parseInt(hex.substring(2 * i, 2 * i + 8), 16);\n                inner[i + 0] = n >>> 24;\n                inner[i + 1] = n >>> 16;\n                inner[i + 2] = n >>> 8;\n                inner[i + 3] = n;\n            }\n            return new UUID(inner);\n        }\n        else {\n            throw new SyntaxError(\"could not parse UUID string\");\n        }\n    }\n    /**\n     * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n     * (`0189dcd5-5311-7d40-8db0-9496a2eef37b`).\n     */\n    toString() {\n        let text = \"\";\n        for (let i = 0; i < this.bytes.length; i++) {\n            text += DIGITS.charAt(this.bytes[i] >>> 4);\n            text += DIGITS.charAt(this.bytes[i] & 0xf);\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\n                text += \"-\";\n            }\n        }\n        return text;\n    }\n    /**\n     * @returns The 32-digit hexadecimal representation without hyphens\n     * (`0189dcd553117d408db09496a2eef37b`).\n     */\n    toHex() {\n        let text = \"\";\n        for (let i = 0; i < this.bytes.length; i++) {\n            text += DIGITS.charAt(this.bytes[i] >>> 4);\n            text += DIGITS.charAt(this.bytes[i] & 0xf);\n        }\n        return text;\n    }\n    /** @returns The 8-4-4-4-12 canonical hexadecimal string representation. */\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * Reports the variant field value of the UUID or, if appropriate, \"NIL\" or\n     * \"MAX\".\n     *\n     * For convenience, this method reports \"NIL\" or \"MAX\" if `this` represents\n     * the Nil or Max UUID, although the Nil and Max UUIDs are technically\n     * subsumed under the variants `0b0` and `0b111`, respectively.\n     */\n    getVariant() {\n        const n = this.bytes[8] >>> 4;\n        if (n < 0) {\n            throw new Error(\"unreachable\");\n        }\n        else if (n <= 0b0111) {\n            return this.bytes.every((e) => e === 0) ? \"NIL\" : \"VAR_0\";\n        }\n        else if (n <= 0b1011) {\n            return \"VAR_10\";\n        }\n        else if (n <= 0b1101) {\n            return \"VAR_110\";\n        }\n        else if (n <= 0b1111) {\n            return this.bytes.every((e) => e === 0xff) ? \"MAX\" : \"VAR_RESERVED\";\n        }\n        else {\n            throw new Error(\"unreachable\");\n        }\n    }\n    /**\n     * Returns the version field value of the UUID or `undefined` if the UUID does\n     * not have the variant field value of `0b10`.\n     */\n    getVersion() {\n        return this.getVariant() === \"VAR_10\" ? this.bytes[6] >>> 4 : undefined;\n    }\n    /** Creates an object from `this`. */\n    clone() {\n        return new UUID(this.bytes.slice(0));\n    }\n    /** Returns true if `this` is equivalent to `other`. */\n    equals(other) {\n        return this.compareTo(other) === 0;\n    }\n    /**\n     * Returns a negative integer, zero, or positive integer if `this` is less\n     * than, equal to, or greater than `other`, respectively.\n     */\n    compareTo(other) {\n        for (let i = 0; i < 16; i++) {\n            const diff = this.bytes[i] - other.bytes[i];\n            if (diff !== 0) {\n                return Math.sign(diff);\n            }\n        }\n        return 0;\n    }\n}\n/**\n * Encapsulates the monotonic counter state.\n *\n * This class provides APIs to utilize a separate counter state from that of the\n * global generator used by {@link uuidv7} and {@link uuidv7obj}. In addition to\n * the default {@link generate} method, this class has {@link generateOrAbort}\n * that is useful to absolutely guarantee the monotonically increasing order of\n * generated UUIDs. See their respective documentation for details.\n */\nexport class V7Generator {\n    /**\n     * Creates a generator object with the default random number generator, or\n     * with the specified one if passed as an argument. The specified random\n     * number generator should be cryptographically strong and securely seeded.\n     */\n    constructor(randomNumberGenerator) {\n        this.timestamp = 0;\n        this.counter = 0;\n        this.random = randomNumberGenerator !== null && randomNumberGenerator !== void 0 ? randomNumberGenerator : getDefaultRandom();\n    }\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or resets the\n     * generator upon significant timestamp rollback.\n     *\n     * This method returns a monotonically increasing UUID by reusing the previous\n     * timestamp even if the up-to-date timestamp is smaller than the immediately\n     * preceding UUID's. However, when such a clock rollback is considered\n     * significant (i.e., by more than ten seconds), this method resets the\n     * generator and returns a new UUID based on the given timestamp, breaking the\n     * increasing order of UUIDs.\n     *\n     * See {@link generateOrAbort} for the other mode of generation and\n     * {@link generateOrResetCore} for the low-level primitive.\n     */\n    generate() {\n        return this.generateOrResetCore(Date.now(), 10000);\n    }\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or returns\n     * `undefined` upon significant timestamp rollback.\n     *\n     * This method returns a monotonically increasing UUID by reusing the previous\n     * timestamp even if the up-to-date timestamp is smaller than the immediately\n     * preceding UUID's. However, when such a clock rollback is considered\n     * significant (i.e., by more than ten seconds), this method aborts and\n     * returns `undefined` immediately.\n     *\n     * See {@link generate} for the other mode of generation and\n     * {@link generateOrAbortCore} for the low-level primitive.\n     */\n    generateOrAbort() {\n        return this.generateOrAbortCore(Date.now(), 10000);\n    }\n    /**\n     * Generates a new UUIDv7 object from the `unixTsMs` passed, or resets the\n     * generator upon significant timestamp rollback.\n     *\n     * This method is equivalent to {@link generate} except that it takes a custom\n     * timestamp and clock rollback allowance.\n     *\n     * @param rollbackAllowance - The amount of `unixTsMs` rollback that is\n     * considered significant. A suggested value is `10_000` (milliseconds).\n     * @throws RangeError if `unixTsMs` is not a 48-bit positive integer.\n     */\n    generateOrResetCore(unixTsMs, rollbackAllowance) {\n        let value = this.generateOrAbortCore(unixTsMs, rollbackAllowance);\n        if (value === undefined) {\n            // reset state and resume\n            this.timestamp = 0;\n            value = this.generateOrAbortCore(unixTsMs, rollbackAllowance);\n        }\n        return value;\n    }\n    /**\n     * Generates a new UUIDv7 object from the `unixTsMs` passed, or returns\n     * `undefined` upon significant timestamp rollback.\n     *\n     * This method is equivalent to {@link generateOrAbort} except that it takes a\n     * custom timestamp and clock rollback allowance.\n     *\n     * @param rollbackAllowance - The amount of `unixTsMs` rollback that is\n     * considered significant. A suggested value is `10_000` (milliseconds).\n     * @throws RangeError if `unixTsMs` is not a 48-bit positive integer.\n     */\n    generateOrAbortCore(unixTsMs, rollbackAllowance) {\n        const MAX_COUNTER = 4398046511103;\n        if (!Number.isInteger(unixTsMs) ||\n            unixTsMs < 1 ||\n            unixTsMs > 281474976710655) {\n            throw new RangeError(\"`unixTsMs` must be a 48-bit positive integer\");\n        }\n        else if (rollbackAllowance < 0 || rollbackAllowance > 281474976710655) {\n            throw new RangeError(\"`rollbackAllowance` out of reasonable range\");\n        }\n        if (unixTsMs > this.timestamp) {\n            this.timestamp = unixTsMs;\n            this.resetCounter();\n        }\n        else if (unixTsMs + rollbackAllowance >= this.timestamp) {\n            // go on with previous timestamp if new one is not much smaller\n            this.counter++;\n            if (this.counter > MAX_COUNTER) {\n                // increment timestamp at counter overflow\n                this.timestamp++;\n                this.resetCounter();\n            }\n        }\n        else {\n            // abort if clock went backwards to unbearable extent\n            return undefined;\n        }\n        return UUID.fromFieldsV7(this.timestamp, Math.trunc(this.counter / 2 ** 30), this.counter & (2 ** 30 - 1), this.random.nextUint32());\n    }\n    /** Initializes the counter at a 42-bit random integer. */\n    resetCounter() {\n        this.counter =\n            this.random.nextUint32() * 0x400 + (this.random.nextUint32() & 0x3ff);\n    }\n    /**\n     * Generates a new UUIDv4 object utilizing the random number generator inside.\n     *\n     * @internal\n     */\n    generateV4() {\n        const bytes = new Uint8Array(Uint32Array.of(this.random.nextUint32(), this.random.nextUint32(), this.random.nextUint32(), this.random.nextUint32()).buffer);\n        bytes[6] = 0x40 | (bytes[6] >>> 4);\n        bytes[8] = 0x80 | (bytes[8] >>> 2);\n        return UUID.ofInner(bytes);\n    }\n}\n/** Returns the default random number generator available in the environment. */\nconst getDefaultRandom = () => {\n    // detect Web Crypto API\n    if (typeof crypto !== \"undefined\" &&\n        typeof crypto.getRandomValues !== \"undefined\") {\n        return new BufferedCryptoRandom();\n    }\n    else {\n        // fall back on Math.random() unless the flag is set to true\n        if (typeof UUIDV7_DENY_WEAK_RNG !== \"undefined\" && UUIDV7_DENY_WEAK_RNG) {\n            throw new Error(\"no cryptographically strong RNG available\");\n        }\n        return {\n            nextUint32: () => Math.trunc(Math.random() * 65536) * 65536 +\n                Math.trunc(Math.random() * 65536),\n        };\n    }\n};\n/**\n * Wraps `crypto.getRandomValues()` to enable buffering; this uses a small\n * buffer by default to avoid both unbearable throughput decline in some\n * environments and the waste of time and space for unused values.\n */\nclass BufferedCryptoRandom {\n    constructor() {\n        this.buffer = new Uint32Array(8);\n        this.cursor = 0xffff;\n    }\n    nextUint32() {\n        if (this.cursor >= this.buffer.length) {\n            crypto.getRandomValues(this.buffer);\n            this.cursor = 0;\n        }\n        return this.buffer[this.cursor++];\n    }\n}\nlet defaultGenerator;\n/**\n * Generates a UUIDv7 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv7 = () => uuidv7obj().toString();\n/** Generates a UUIDv7 object. */\nexport const uuidv7obj = () => (defaultGenerator || (defaultGenerator = new V7Generator())).generate();\n/**\n * Generates a UUIDv4 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv4 = () => uuidv4obj().toString();\n/** Generates a UUIDv4 object. */\nexport const uuidv4obj = () => (defaultGenerator || (defaultGenerator = new V7Generator())).generateV4();\n"],
  "mappings": "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",
  "names": ["generateV7_exports", "__export", "generateV7_default", "__toCommonJS", "import_api", "DIGITS", "UUID", "bytes", "unixTsMs", "randA", "randBHi", "randBLo", "uuid", "_a", "_b", "_c", "_d", "hex", "inner", "i", "n", "text", "e", "other", "diff", "V7Generator", "randomNumberGenerator", "getDefaultRandom", "rollbackAllowance", "value", "BufferedCryptoRandom", "defaultGenerator", "uuidv7", "uuidv7obj", "UUID_MAX_NUMBER", "generateV7_default", "props", "numberOfUUIDsToGenerate", "upperCaseLetters", "defaultAction", "parseableNumber", "uuids", "uuidv7", "element", "action", "successMessage", "e"]
}
